{"mappings":"A,I,E,C,CEEA,OAAM,EACJ,OAAO,OAAS,CACd,KAAM,OACN,QAAS,UACT,IAAK,MACL,KAAM,MACR,CAAE,AAEF,aACE,EAAe,CACb,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,CACA,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAC,IAAI,CAC9B,IAAI,CAAC,SAAS,CAAG,EAAa,MAAM,CACpC,IAAI,CAAC,YAAY,CAAG,EACpB,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,KAAK,CAAG,EAAa,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,CACjD,CAEA,WAAW,CAAK,CAAE,CAChB,OAAO,CAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAG,IAAa,EAAM,GAAG,CAAC,AAAC,GAAQ,CAAG,CAAC,EAAS,EACvE,CAEA,UAAW,CACT,GAAI,IAAI,CAAC,MAAM,GAAK,EAAK,MAAM,CAAC,OAAO,CACrC,OAGF,IAAM,EAAU,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,IAC9B,IAAI,EAAS,EAAI,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAElC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,EAM3B,MAAO,IAFP,EAAS,EAAO,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,MAEX,MAAM,IAAI,CAAC,SAAS,CAAG,EAAO,MAAM,EAAE,IAAI,CAAC,GAAG,AACtE,GAEoB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAK,IAClC,EAAI,KAAK,CAAC,CAAC,EAAM,IACf,IAAS,CAAO,CAAC,EAAS,CAAC,EAAU,KAK9C,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,SAAS,GAElB,CAEA,WAAY,CACV,GAAI,IAAI,CAAC,MAAM,GAAK,EAAK,MAAM,CAAC,OAAO,CACrC,OAGF,IAAM,EAAU,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,IAC9B,IAAI,EAAS,EAAI,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAElC,IAAK,IAAI,EAAI,EAAO,MAAM,CAAG,EAAG,EAAI,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,EAM3B,OAFA,EAAS,EAAO,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAE1B,IAAI,MAAM,IAAI,CAAC,SAAS,CAAG,EAAO,MAAM,EAAE,IAAI,CAAC,MAAO,EAAO,AACtE,GAEoB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAK,IAClC,EAAI,KAAK,CAAC,CAAC,EAAM,IACf,IAAS,CAAO,CAAC,EAAS,CAAC,EAAU,KAK9C,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,SAAS,GAElB,CAEA,QAAS,CACP,GAAI,IAAI,CAAC,MAAM,GAAK,EAAK,MAAM,CAAC,OAAO,CACrC,OAKF,IAAM,EAAa,AAFH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAEf,GAAG,CAAC,AAAC,IAC9B,IAAI,EAAY,EAAO,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAExC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAU,MAAM,CAAG,EAAG,IACpC,CAAS,CAAC,EAAE,GAAK,CAAS,CAAC,EAAI,EAAE,GACnC,CAAS,CAAC,EAAE,EAAI,EAChB,CAAS,CAAC,EAAI,EAAE,CAAG,EACnB,IAAI,CAAC,KAAK,EAAI,CAAS,CAAC,EAAE,EAM9B,MAAO,IAFP,EAAY,EAAU,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,MAIlC,MAAM,IAAI,CAAC,SAAS,CAAG,EAAU,MAAM,EAAE,IAAI,CAAC,GAClD,AACH,GAEM,EAAW,CAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAG,IAC9B,EAAW,GAAG,CAAC,AAAC,GAAW,CAAM,CAAC,EAAS,GAGhC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAK,IAClC,EAAI,KAAK,CAAC,CAAC,EAAM,IACf,IAAS,CAAQ,CAAC,EAAS,CAAC,EAAU,KAK/C,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,SAAS,GAElB,CAEA,UAAW,CACT,GAAI,IAAI,CAAC,MAAM,GAAK,EAAK,MAAM,CAAC,OAAO,CACrC,OAKF,IAAM,EAAa,AAFH,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAEf,GAAG,CAAC,AAAC,IAC9B,IAAI,EAAY,EAAO,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAExC,IAAK,IAAI,EAAI,EAAU,MAAM,CAAG,EAAG,EAAI,EAAG,IACpC,CAAS,CAAC,EAAE,GAAK,CAAS,CAAC,EAAI,EAAE,GACnC,CAAS,CAAC,EAAE,EAAI,EAChB,CAAS,CAAC,EAAI,EAAE,CAAG,EACnB,IAAI,CAAC,KAAK,EAAI,CAAS,CAAC,EAAE,EAM9B,OAFA,EAAY,EAAU,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAEhC,IACF,MAAM,IAAI,CAAC,SAAS,CAAG,EAAU,MAAM,EAAE,IAAI,CAAC,MAC9C,EACJ,AACH,GAEM,EAAW,CAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAG,IAC9B,EAAW,GAAG,CAAC,AAAC,GAAW,CAAM,CAAC,EAAS,GAGhC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAK,IAClC,EAAI,KAAK,CAAC,CAAC,EAAM,IACf,IAAS,CAAQ,CAAC,EAAS,CAAC,EAAU,KAK/C,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,SAAS,GAElB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,OAAQ,CACN,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAC,OAAO,CACjC,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EACpD,IAAI,CAAC,UAAU,GACf,IAAI,CAAC,UAAU,GAEf,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,SAAU,CACR,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAC,IAAI,CAC9B,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EAEpD,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,UAAW,CACT,IAAM,EAAQ,SAAS,gBAAgB,CAAC,eAClC,EAAc,IAAI,CAAC,KAAK,CAAC,IAAI,GAEnC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAChC,CAAK,CAAC,EAAE,CAAC,SAAS,CAAG,aAEjB,CAAW,CAAC,EAAE,EAChB,CAAK,CAAC,EAAE,CAAC,WAAW,CAAG,CAAW,CAAC,EAAE,CACrC,CAAK,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,CAAW,CAAC,EAAE,CAAC,CAAC,GAEtD,CAAK,CAAC,EAAE,CAAC,WAAW,CAAG,GAI3B,IAAK,IAAM,KAAQ,EACJ,OAAT,GACF,CAAA,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAC,GAAG,AAAH,EAId,IAAI,CAAC,mBAAmB,IAGtC,CAAA,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAC,IAAI,AAAJ,CAE9B,CAEA,qBAAsB,KAKhB,EAFJ,IAAM,EAAgB,CAAC,AAFH,IAAI,CAAC,KAAK,CAAC,IAAI,GAEA,KAAK,CAAC,AAAC,GAAS,AAAS,IAAT,GAInD,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,SAAS,CAAE,IACtC,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,SAAS,CAAE,IAEpC,CAAA,EAAO,IAAI,CAAC,SAAS,CAAG,GACtB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,EAClD,EAAM,IAAI,CAAC,SAAS,CAAG,GACtB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,AAAJ,GAE/C,CAAA,EAAW,CAAA,CAPf,QAYE,EAAA,KAAiB,CAKvB,CAEA,YAAa,CACX,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,SAAS,CAAE,IAClC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,SAAS,CAAE,IACT,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,EAAW,IAAI,CAAC,CAAE,IAAK,EAAG,IAAK,CAAE,GAKvC,GAAI,AAAsB,IAAtB,EAAW,MAAM,CACnB,OAGF,IAAM,EAAY,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAExD,CAAA,IAAE,CAAG,CAAA,IAAE,CAAG,CAAE,CAAG,CAAU,CAAC,EAAU,CAEpC,EAAW,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAM,IAAI,EAAE,CAE7C,CAAA,CAAQ,CAAC,EAAI,CAAC,EAAI,CAAG,KAAK,MAAM,GAAK,GAAM,EAAI,EAE/C,IAAI,CAAC,KAAK,CAAG,CACf,CACF,CDtSA,MAAM,EAAO,GCwSb,CAAA,EAAiB,CAAjB,EDtSM,EAAS,SAAS,aAAa,CAAC,WAChC,EAAQ,SAAS,aAAa,CAAC,eAC/B,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBAiC1C,SAAS,EAAU,CAAC,EAGlB,OAFA,EAAE,cAAc,GAER,EAAE,GAAG,EACX,IAAK,UACH,EAAK,MAAM,GACX,KAEF,KAAK,YACH,EAAK,QAAQ,GACb,KAEF,KAAK,YACH,EAAK,QAAQ,GACb,KAEF,KAAK,aACH,EAAK,SAAS,EAKlB,CAEA,EAAM,WAAW,CAAG,EAAK,QAAQ,GAE7B,EAAK,SAAS,KAAO,EAAK,MAAM,CAAC,IAAI,CACvC,EAAY,SAAS,CAAC,MAAM,CAAC,UACpB,EAAK,SAAS,KAAO,EAAK,MAAM,CAAC,GAAG,EAC7C,EAAW,SAAS,CAAC,MAAM,CAAC,UAG9B,EAAK,mBAAmB,EAC1B,CAhEA,EAAO,gBAAgB,CAAC,QAExB,WACM,EAAK,MAAM,GAAK,EAAK,MAAM,CAAC,IAAI,EAClC,EAAK,KAAK,GAEV,EAAO,SAAS,CAAC,MAAM,CAAC,SACxB,EAAO,SAAS,CAAC,GAAG,CAAC,WACrB,EAAO,WAAW,CAAG,UACrB,EAAa,SAAS,CAAC,GAAG,CAAC,YAI3B,EAAK,OAAO,GACZ,EAAM,WAAW,CAAG,EAAK,QAAQ,GAEjC,EAAO,SAAS,CAAC,MAAM,CAAC,WACxB,EAAO,SAAS,CAAC,GAAG,CAAC,SACrB,EAAO,WAAW,CAAG,QACrB,EAAa,SAAS,CAAC,MAAM,CAAC,WAC9B,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAW,SAAS,CAAC,GAAG,CAAC,UAG3B,SAAS,gBAAgB,CAAC,UAAW,GAEjC,EAAK,MAAM,GAAK,EAAK,MAAM,CAAC,OAAO,EACrC,SAAS,mBAAmB,CAAC,UAAW,EAE5C","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static STATUS = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.status = $a5fd07fa01589658$var$Game.STATUS.idle;\n        this.fieldSize = initialState.length;\n        this.initialState = initialState;\n        this.score = 0;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    getColumns(state) {\n        return state[0].map((_, colIndex)=>state.map((row)=>row[colIndex]));\n    }\n    moveLeft() {\n        if (this.status !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        const newRows = this.state.map((row)=>{\n            let newRow = row.filter((cell)=>cell !== 0);\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                newRow[i + 1] = 0;\n                this.score += newRow[i];\n            }\n            newRow = newRow.filter((cell)=>cell !== 0);\n            return [\n                ...newRow,\n                ...Array(this.fieldSize - newRow.length).fill(0)\n            ];\n        });\n        const hasChanged = !this.state.every((row, rowIndex)=>{\n            return row.every((cell, cellIndex)=>{\n                return cell === newRows[rowIndex][cellIndex];\n            });\n        });\n        if (hasChanged) {\n            this.state = newRows;\n            this.addNewCell();\n            this.setField();\n            this.getStatus();\n        }\n    }\n    moveRight() {\n        if (this.status !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        const newRows = this.state.map((row)=>{\n            let newRow = row.filter((cell)=>cell !== 0);\n            for(let i = newRow.length - 1; i > 0; i--)if (newRow[i] === newRow[i - 1]) {\n                newRow[i] *= 2;\n                newRow[i - 1] = 0;\n                this.score += newRow[i];\n            }\n            newRow = newRow.filter((cell)=>cell !== 0);\n            return [\n                ...Array(this.fieldSize - newRow.length).fill(0),\n                ...newRow\n            ];\n        });\n        const hasChanged = !this.state.every((row, rowIndex)=>{\n            return row.every((cell, cellIndex)=>{\n                return cell === newRows[rowIndex][cellIndex];\n            });\n        });\n        if (hasChanged) {\n            this.state = newRows;\n            this.addNewCell();\n            this.setField();\n            this.getStatus();\n        }\n    }\n    moveUp() {\n        if (this.status !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        const columns = this.getColumns(this.state);\n        const newColumns = columns.map((column)=>{\n            let newColumn = column.filter((cell)=>cell !== 0);\n            for(let i = 0; i < newColumn.length - 1; i++)if (newColumn[i] === newColumn[i + 1]) {\n                newColumn[i] *= 2;\n                newColumn[i + 1] = 0;\n                this.score += newColumn[i];\n            }\n            newColumn = newColumn.filter((cell)=>cell !== 0);\n            return [\n                ...newColumn,\n                ...Array(this.fieldSize - newColumn.length).fill(0)\n            ];\n        });\n        const newState = newColumns[0].map((_, colIndex)=>{\n            return newColumns.map((column)=>column[colIndex]);\n        });\n        const hasChanged = !this.state.every((row, rowIndex)=>{\n            return row.every((cell, cellIndex)=>{\n                return cell === newState[rowIndex][cellIndex];\n            });\n        });\n        if (hasChanged) {\n            this.state = newState;\n            this.addNewCell();\n            this.setField();\n            this.getStatus();\n        }\n    }\n    moveDown() {\n        if (this.status !== $a5fd07fa01589658$var$Game.STATUS.playing) return;\n        const columns = this.getColumns(this.state);\n        const newColumns = columns.map((column)=>{\n            let newColumn = column.filter((cell)=>cell !== 0);\n            for(let i = newColumn.length - 1; i > 0; i--)if (newColumn[i] === newColumn[i - 1]) {\n                newColumn[i] *= 2;\n                newColumn[i - 1] = 0;\n                this.score += newColumn[i];\n            }\n            newColumn = newColumn.filter((cell)=>cell !== 0);\n            return [\n                ...Array(this.fieldSize - newColumn.length).fill(0),\n                ...newColumn\n            ];\n        });\n        const newState = newColumns[0].map((_, colIndex)=>{\n            return newColumns.map((column)=>column[colIndex]);\n        });\n        const hasChanged = !this.state.every((row, rowIndex)=>{\n            return row.every((cell, cellIndex)=>{\n                return cell === newState[rowIndex][cellIndex];\n            });\n        });\n        if (hasChanged) {\n            this.state = newState;\n            this.addNewCell();\n            this.setField();\n            this.getStatus();\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.playing;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.addNewCell();\n        this.addNewCell();\n        this.setField();\n        this.score = 0;\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS.idle;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.setField();\n        this.score = 0;\n    }\n    setField() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        const flatedState = this.state.flat();\n        for(let i = 0; i < cells.length; i++){\n            cells[i].className = \"field-cell\";\n            if (flatedState[i]) {\n                cells[i].textContent = flatedState[i];\n                cells[i].classList.add(`field-cell--${flatedState[i]}`);\n            } else cells[i].textContent = \"\";\n        }\n        for (const cell of flatedState)if (cell === 2048) this.status = $a5fd07fa01589658$var$Game.STATUS.win;\n        const hasMove = this.checkMovesAvailable();\n        if (!hasMove) this.status = $a5fd07fa01589658$var$Game.STATUS.lose;\n    }\n    checkMovesAvailable() {\n        const flatedState = this.state.flat();\n        const hasEmptyCells = !flatedState.every((cell)=>cell !== 0);\n        let canStack;\n        for(let row = 0; row < this.fieldSize; row++){\n            for(let col = 0; col < this.fieldSize; col++)if (col < this.fieldSize - 1 && this.state[row][col] === this.state[row][col + 1] || row < this.fieldSize - 1 && this.state[row][col] === this.state[row + 1][col]) canStack = true;\n        }\n        if (hasEmptyCells || canStack) return true;\n        return false;\n    }\n    addNewCell() {\n        const emptyCells = [];\n        for(let i = 0; i < this.fieldSize; i++){\n            for(let j = 0; j < this.fieldSize; j++)if (this.state[i][j] === 0) emptyCells.push({\n                row: i,\n                col: j\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const cellIndex = Math.floor(Math.random() * emptyCells.length);\n        const { row: row, col: col } = emptyCells[cellIndex];\n        const newState = this.state.map((r)=>[\n                ...r\n            ]);\n        newState[row][col] = Math.random() > 0.4 ? 2 : 4;\n        this.state = newState;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\nfunction $09e991522ca7e64e$var$startGame() {\n    if ($09e991522ca7e64e$var$game.status === $a5fd07fa01589658$exports.STATUS.idle) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    }\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKey);\n    if ($09e991522ca7e64e$var$game.status !== $a5fd07fa01589658$exports.STATUS.playing) document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$handleKey);\n}\nfunction $09e991522ca7e64e$var$handleKey(e) {\n    e.preventDefault();\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            break;\n    }\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUS.lose) $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.STATUS.win) $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$game.checkMovesAvailable();\n}\n\n\n//# sourceMappingURL=index.813064a7.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.button');\nconst score = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nbutton.addEventListener('click', startGame);\n\nfunction startGame() {\n  if (game.status === Game.STATUS.idle) {\n    game.start();\n\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n  } else {\n    game.restart();\n    score.textContent = game.getScore();\n\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n    startMessage.classList.remove('hidden');\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n  }\n\n  document.addEventListener('keydown', handleKey);\n\n  if (game.status !== Game.STATUS.playing) {\n    document.removeEventListener('keydown', handleKey);\n  }\n}\n\nfunction handleKey(e) {\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    default:\n      break;\n  }\n\n  score.textContent = game.getScore();\n\n  if (game.getStatus() === Game.STATUS.lose) {\n    loseMessage.classList.remove('hidden');\n  } else if (game.getStatus() === Game.STATUS.win) {\n    winMessage.classList.remove('hidden');\n  }\n\n  game.checkMovesAvailable();\n}\n","'use strict';\n\nclass Game {\n  static STATUS = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.status = Game.STATUS.idle;\n    this.fieldSize = initialState.length;\n    this.initialState = initialState;\n    this.score = 0;\n    this.state = initialState.map((row) => [...row]);\n  }\n\n  getColumns(state) {\n    return state[0].map((_, colIndex) => state.map((row) => row[colIndex]));\n  }\n\n  moveLeft() {\n    if (this.status !== Game.STATUS.playing) {\n      return;\n    }\n\n    const newRows = this.state.map((row) => {\n      let newRow = row.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          newRow[i + 1] = 0;\n          this.score += newRow[i];\n        }\n      }\n\n      newRow = newRow.filter((cell) => cell !== 0);\n\n      return [...newRow, ...Array(this.fieldSize - newRow.length).fill(0)];\n    });\n\n    const hasChanged = !this.state.every((row, rowIndex) => {\n      return row.every((cell, cellIndex) => {\n        return cell === newRows[rowIndex][cellIndex];\n      });\n    });\n\n    if (hasChanged) {\n      this.state = newRows;\n      this.addNewCell();\n      this.setField();\n      this.getStatus();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== Game.STATUS.playing) {\n      return;\n    }\n\n    const newRows = this.state.map((row) => {\n      let newRow = row.filter((cell) => cell !== 0);\n\n      for (let i = newRow.length - 1; i > 0; i--) {\n        if (newRow[i] === newRow[i - 1]) {\n          newRow[i] *= 2;\n          newRow[i - 1] = 0;\n          this.score += newRow[i];\n        }\n      }\n\n      newRow = newRow.filter((cell) => cell !== 0);\n\n      return [...Array(this.fieldSize - newRow.length).fill(0), ...newRow];\n    });\n\n    const hasChanged = !this.state.every((row, rowIndex) => {\n      return row.every((cell, cellIndex) => {\n        return cell === newRows[rowIndex][cellIndex];\n      });\n    });\n\n    if (hasChanged) {\n      this.state = newRows;\n      this.addNewCell();\n      this.setField();\n      this.getStatus();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== Game.STATUS.playing) {\n      return;\n    }\n\n    const columns = this.getColumns(this.state);\n\n    const newColumns = columns.map((column) => {\n      let newColumn = column.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < newColumn.length - 1; i++) {\n        if (newColumn[i] === newColumn[i + 1]) {\n          newColumn[i] *= 2;\n          newColumn[i + 1] = 0;\n          this.score += newColumn[i];\n        }\n      }\n\n      newColumn = newColumn.filter((cell) => cell !== 0);\n\n      return [\n        ...newColumn,\n        ...Array(this.fieldSize - newColumn.length).fill(0),\n      ];\n    });\n\n    const newState = newColumns[0].map((_, colIndex) => {\n      return newColumns.map((column) => column[colIndex]);\n    });\n\n    const hasChanged = !this.state.every((row, rowIndex) => {\n      return row.every((cell, cellIndex) => {\n        return cell === newState[rowIndex][cellIndex];\n      });\n    });\n\n    if (hasChanged) {\n      this.state = newState;\n      this.addNewCell();\n      this.setField();\n      this.getStatus();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== Game.STATUS.playing) {\n      return;\n    }\n\n    const columns = this.getColumns(this.state);\n\n    const newColumns = columns.map((column) => {\n      let newColumn = column.filter((cell) => cell !== 0);\n\n      for (let i = newColumn.length - 1; i > 0; i--) {\n        if (newColumn[i] === newColumn[i - 1]) {\n          newColumn[i] *= 2;\n          newColumn[i - 1] = 0;\n          this.score += newColumn[i];\n        }\n      }\n\n      newColumn = newColumn.filter((cell) => cell !== 0);\n\n      return [\n        ...Array(this.fieldSize - newColumn.length).fill(0),\n        ...newColumn,\n      ];\n    });\n\n    const newState = newColumns[0].map((_, colIndex) => {\n      return newColumns.map((column) => column[colIndex]);\n    });\n\n    const hasChanged = !this.state.every((row, rowIndex) => {\n      return row.every((cell, cellIndex) => {\n        return cell === newState[rowIndex][cellIndex];\n      });\n    });\n\n    if (hasChanged) {\n      this.state = newState;\n      this.addNewCell();\n      this.setField();\n      this.getStatus();\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.STATUS.playing;\n    this.state = this.initialState.map((row) => [...row]);\n    this.addNewCell();\n    this.addNewCell();\n\n    this.setField();\n    this.score = 0;\n  }\n\n  restart() {\n    this.status = Game.STATUS.idle;\n    this.state = this.initialState.map((row) => [...row]);\n\n    this.setField();\n    this.score = 0;\n  }\n\n  setField() {\n    const cells = document.querySelectorAll('.field-cell');\n    const flatedState = this.state.flat();\n\n    for (let i = 0; i < cells.length; i++) {\n      cells[i].className = 'field-cell';\n\n      if (flatedState[i]) {\n        cells[i].textContent = flatedState[i];\n        cells[i].classList.add(`field-cell--${flatedState[i]}`);\n      } else {\n        cells[i].textContent = '';\n      }\n    }\n\n    for (const cell of flatedState) {\n      if (cell === 2048) {\n        this.status = Game.STATUS.win;\n      }\n    }\n\n    const hasMove = this.checkMovesAvailable();\n\n    if (!hasMove) {\n      this.status = Game.STATUS.lose;\n    }\n  }\n\n  checkMovesAvailable() {\n    const flatedState = this.state.flat();\n\n    const hasEmptyCells = !flatedState.every((cell) => cell !== 0);\n\n    let canStack;\n\n    for (let row = 0; row < this.fieldSize; row++) {\n      for (let col = 0; col < this.fieldSize; col++) {\n        if (\n          (col < this.fieldSize - 1 &&\n            this.state[row][col] === this.state[row][col + 1]) ||\n          (row < this.fieldSize - 1 &&\n            this.state[row][col] === this.state[row + 1][col])\n        ) {\n          canStack = true;\n        }\n      }\n    }\n\n    if (hasEmptyCells || canStack) {\n      return true;\n    }\n\n    return false;\n  }\n\n  addNewCell() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.fieldSize; i++) {\n      for (let j = 0; j < this.fieldSize; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push({ row: i, col: j });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const cellIndex = Math.floor(Math.random() * emptyCells.length);\n\n    const { row, col } = emptyCells[cellIndex];\n\n    const newState = this.state.map((r) => [...r]);\n\n    newState[row][col] = Math.random() > 0.4 ? 2 : 4;\n\n    this.state = newState;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","STATUS","idle","playing","win","lose","constructor","initialState","status","fieldSize","length","score","state","map","row","getColumns","_","colIndex","moveLeft","newRows","newRow","filter","cell","i","Array","fill","every","rowIndex","cellIndex","addNewCell","setField","getStatus","moveRight","moveUp","newColumns","columns","column","newColumn","newState","moveDown","getScore","getState","start","restart","cells","document","querySelectorAll","flatedState","flat","className","textContent","classList","add","checkMovesAvailable","canStack","hasEmptyCells","col","emptyCells","j","push","Math","floor","random","r","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$handleKey","e","preventDefault","key","remove","addEventListener","removeEventListener"],"version":3,"file":"index.813064a7.js.map"}